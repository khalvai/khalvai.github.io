{"version":3,"file":"static/js/715.3b2a4b31.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/markdown-to-jsx@7.7.10_react@18.3.1/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV === 'test') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst Priority = {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX: 0,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH: 1,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED: 2,\n  /**\n   * inline elements\n   */\n  LOW: 3,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN: 4,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script', 'pre']\nconst ATTRIBUTES_TO_SANITIZE = [\n  'src',\n  'href',\n  'data',\n  'formAction',\n  'srcDoc',\n  'action',\n]\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^[\\s\\S](?:(?!  |[0-9]\\.|http)[^=*_~\\-\\n<`\\\\\\[!])*/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _qualify: source => LIST_ITEM_PREFIX_R.test(source),\n    _match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    _render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction startsWith(str: string, prefix: string) {\n  return str.startsWith(prefix)\n}\n\nfunction qualifies(\n  source: string,\n  state: MarkdownToJSX.State,\n  qualify: MarkdownToJSX.Rule<any>['_qualify']\n) {\n  if (Array.isArray(qualify)) {\n    for (let i = 0; i < qualify.length; i++) {\n      if (startsWith(source, qualify[i])) return true\n    }\n\n    return false\n  }\n\n  return qualify(source, state)\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\ntype StyleTuple = [key: string, value: string]\n\nfunction parseStyleAttribute(styleString: string): StyleTuple[] {\n  const styles: StyleTuple[] = []\n  let buffer = ''\n  let inUrl = false\n  let inQuotes = false\n  let quoteChar: '\"' | \"'\" | '' = ''\n\n  if (!styleString) return styles\n\n  for (let i = 0; i < styleString.length; i++) {\n    const char = styleString[i]\n\n    // Handle quotes\n    if ((char === '\"' || char === \"'\") && !inUrl) {\n      if (!inQuotes) {\n        inQuotes = true\n        quoteChar = char\n      } else if (char === quoteChar) {\n        inQuotes = false\n        quoteChar = ''\n      }\n    }\n\n    // Track url() values\n    if (char === '(' && buffer.endsWith('url')) {\n      inUrl = true\n    } else if (char === ')' && inUrl) {\n      inUrl = false\n    }\n\n    // Only split on semicolons when not in quotes or url()\n    if (char === ';' && !inQuotes && !inUrl) {\n      const declaration = buffer.trim()\n      if (declaration) {\n        const colonIndex = declaration.indexOf(':')\n        if (colonIndex > 0) {\n          const key = declaration.slice(0, colonIndex).trim()\n          const value = declaration.slice(colonIndex + 1).trim()\n          styles.push([key, value])\n        }\n      }\n      buffer = ''\n    } else {\n      buffer += char\n    }\n  }\n\n  // Handle the last declaration\n  const declaration = buffer.trim()\n  if (declaration) {\n    const colonIndex = declaration.indexOf(':')\n    if (colonIndex > 0) {\n      const key = declaration.slice(0, colonIndex).trim()\n      const value = declaration.slice(colonIndex + 1).trim()\n      styles.push([key, value])\n    }\n  }\n\n  return styles\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return parseStyleAttribute(value).reduce(function (styles, [key, value]) {\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = sanitizeUrlFn(value, tag, key)\n\n      return styles\n    }, {})\n  } else if (ATTRIBUTES_TO_SANITIZE.indexOf(key) !== -1) {\n    return sanitizeUrlFn(unescape(value), tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = unescape(value.slice(1, value.length - 1))\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  var ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      const order = rules[type]._order\n      if (typeof order !== 'number' || !isFinite(order)) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  ruleList.sort(function (a, b) {\n    return rules[a]._order - rules[b]._order || (a < b ? -1 : 1)\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    var result = []\n    state.prevCapture = state.prevCapture || ''\n\n    if (source.trim()) {\n      while (source) {\n        var i = 0\n        while (i < ruleList.length) {\n          var ruleType = ruleList[i]\n          var rule = rules[ruleType]\n\n          if (rule._qualify && !qualifies(source, state, rule._qualify)) {\n            i++\n            continue\n          }\n\n          var capture = rule._match(source, state)\n          if (capture && capture[0]) {\n            source = source.substring(capture[0].length)\n\n            var parsed = rule._parse(capture, nestedParse, state)\n\n            state.prevCapture += capture[0]\n\n            if (!parsed.type) parsed.type = ruleType as unknown as RuleType\n            result.push(parsed)\n            break\n          }\n          i++\n        }\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function (source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nconst SANITIZE_R = /(javascript|vbscript|data(?!:image)):/i\n\nexport function sanitizer(input: string): string {\n  try {\n    const decoded = decodeURIComponent(input).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (SANITIZE_R.test(decoded)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Input contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Input could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        input\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return input\n}\n\nfunction unescape(rawString: string): string {\n  return rawString ? rawString.replace(UNESCAPE_R, '$1') : rawString\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type]._render as MarkdownToJSX.Rule['_render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n): React.JSX.Element {\n  options.overrides = options.overrides || {}\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const slug = options.slugify || slugify\n  const sanitize = options.sanitizer || sanitizer\n  const createElement = options.createElement || React.createElement\n\n  const NON_PARAGRAPH_BLOCK_SYNTAXES = [\n    BLOCKQUOTE_R,\n    CODE_BLOCK_FENCED_R,\n    CODE_BLOCK_R,\n    options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R,\n    HEADING_SETEXT_R,\n    NP_TABLE_R,\n    ORDERED_LIST_R,\n    UNORDERED_LIST_R,\n  ]\n\n  const BLOCK_SYNTAXES = [\n    ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n    PARAGRAPH_R,\n    HTML_BLOCK_ELEMENT_R,\n    HTML_COMMENT_R,\n    HTML_SELF_CLOSING_ELEMENT_R,\n  ]\n\n  function containsBlockSyntax(input: string) {\n    return BLOCK_SYNTAXES.some(r => r.test(input))\n  }\n\n  function matchParagraph(source: string, state: MarkdownToJSX.State) {\n    if (\n      state.inline ||\n      state.simple ||\n      (state.inHTML &&\n        source.indexOf('\\n\\n') === -1 &&\n        state.prevCapture.indexOf('\\n\\n') === -1)\n    ) {\n      return null\n    }\n\n    let match = ''\n\n    source.split('\\n').every(line => {\n      line += '\\n'\n\n      // bail out on first sign of non-paragraph block\n      if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n        return false\n      }\n\n      match += line\n\n      return !!line.trim()\n    })\n\n    const captured = trimEnd(match)\n    if (captured === '') {\n      return null\n    }\n\n    // parseCaptureInline expects the inner content to be at index 2\n    // because index 1 is the delimiter for text formatting syntaxes\n    return [match, , captured] as RegExpMatchArray\n  }\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return createElement(wrapper, { key: 'outer' }, jsx) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    if (!str || !str.trim()) {\n      return null\n    }\n\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          sanitize\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      _qualify: ['>'],\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      _render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' + slug(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      _qualify: source => {\n        const char = source[0]\n        return char === '-' || char === '*' || char === '_'\n      },\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      _qualify: ['    '],\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: unescape(trimEnd(capture[0].replace(/^ {4}/gm, ''))),\n        }\n      },\n\n      _render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      _qualify: ['```', '~~~'],\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      _qualify: ['`'],\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: unescape(capture[2]),\n        }\n      },\n      _render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      _qualify: ['[^'],\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      _qualify: ['[^'],\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          target: `#${slug(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitize(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      _qualify: ['[ ]', '[x]'],\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      _qualify: ['#'],\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: slug(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      _render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          const prevInHTML = state.inHTML\n          state.inHTML = true\n          ast.children = parseFunc(parse, trimmed, state)\n          state.inHTML = prevInHTML\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      _render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      _render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      _qualify: ['<!--'],\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: unescape(capture[1]),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitize(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      _qualify: ['['],\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={sanitize(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      _qualify: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) return false\n        return startsWith(source, 'http://') || startsWith(source, 'https://')\n      },\n      _match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      _match: allowInline(matchParagraph),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] ? unescape(capture[1]) : undefined,\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitize(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitize(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      _qualify: ['|'],\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: anyScopeRegex(TEXT_PLAIN_R),\n      _order: Priority.MIN,\n      _parse(capture) {\n        const text = capture[0]\n        return {\n          text:\n            text.indexOf('&') === -1\n              ? text\n              : text.replace(\n                  HTML_CHAR_CODE_R,\n                  (full, inner) => options.namedCodesToUnicode[inner] || full\n                ),\n        }\n      },\n      _render(node) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      _qualify: ['**', '__'],\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      _qualify: source => {\n        const char = source[0]\n        return (char === '*' || char === '_') && source[1] !== char\n      },\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      _qualify: ['\\\\'],\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      _qualify: ['=='],\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      _qualify: ['~~'],\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5) {\n  //       console.warn(\n  //         `Slow parse for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n  //     }\n\n  //     // console[delta > 5 ? 'warn' : 'log'](\n  //     //   `${key}:parse`,\n  //     //   `${delta.toFixed(3)}ms`,\n  //     //   args[0]\n  //     // )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={slug(def.identifier, slugify)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an HTML context */\n    inHTML?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: (typeof Priority)[keyof typeof Priority]\n    _parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    /**\n     * Optional fast check that can quickly determine if this rule\n     * should even be attempted. Should check the start of the source string\n     * for quick patterns without expensive regex operations.\n     *\n     * @param source The input source string (already trimmed of leading whitespace)\n     * @param state Current parser state\n     * @returns true if the rule should be attempted, false to skip\n     */\n    _qualify?:\n      | string[]\n      | ((source: string, state: MarkdownToJSX.State) => boolean)\n    _render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"],"names":["o","reduce","e","n","toLowerCase","class","for","a","amp","apos","gt","lt","nbsp","quot","c","i","u","l","s","f","_","d","p","y","h","g","m","k","x","v","q","b","S","$","z","E","R","A","B","L","O","j","C","I","T","M","w","D","F","P","N","Z","G","U","V","H","Q","W","J","K","RegExp","X","Y","ee","ne","re","te","oe","ae","ce","ie","ue","le","se","fe","_e","de","pe","ye","he","ge","me","ke","xe","ve","r","t","test","Oe","exec","prevCapture","list","inline","simple","replace","match","items","map","length","indexOf","Se","ordered","start","key","type","qe","be","slice","$e","startsWith","ze","Array","isArray","Ee","Re","Ae","inTable","push","apply","trim","split","filter","Boolean","forEach","Be","align","cells","header","children","Le","textAlign","je","Ce","Ie","Te","Me","we","decodeURIComponent","De","Fe","Pe","Ne","Ze","Ge","Ue","Ve","_len","arguments","_key","join","He","shift","Qe","undefined","overrides","namedCodesToUnicode","slugify","sanitizer","createElement","enforceAtxHeadings","_len2","_key2","className","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","endsWith","_ref","alert","unshift","attrs","text","noInnerParse","tag","lang","footnote","identifier","target","href","completed","checked","readOnly","id","level","some","inAnchor","inHTML","alt","title","src","disableAutoLink","every","ref","fallbackChildren","style","disableParsingRawHTML","Object","keys","substring","sort","renderRule","options"],"sourceRoot":""}